//
// Ne=1000, gen(burnin)= 10000, mu= 10^-6 to 10^-9,  PSI(p)= 0 to 0.2, bottleneck(bn)=1 to 100

initialize() {
	initializeMutationRate(mu);
	initializeMutationType("m1", 1.0, "e", -0.001);   // weakly deleterious (actually Ne*s= 1 so it's effectively neutral
	initializeMutationType("m2", 1.0, "f", -0.01);   // weakly deleterious Ne*s=10
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 441153);
	initializeRecombinationRate(0);
}1 {
	defineConstant("N",1000);
	sim.addSubpop("p1", N);
	p1.setCloningRate(1.0);
	defineConstant("mmcgens2",c(10000:11000));
	defineConstant("psi",p);
	
	if(psi!=0){
		for(gen in mmcgens2){
			
			sim.registerEarlyEvent(NULL,s2.source, gen, gen);
			sim.registerModifyChildCallback(NULL,s3.source,NULL,gen,gen);
			sim.registerLateEvent(NULL,s4.source, gen, gen);
		
		}}
	
	sim.deregisterScriptBlock(s2);
	sim.deregisterScriptBlock(s3);
	sim.deregisterScriptBlock(s4);
}


s2 2 early(){
	sim.addSubpopSplit(2,1,p1);
	p1.setCloningRate(1.0);
	p1.setMigrationRates(2, psi);
	countingp1= N-round(N*psi);
	countingother=round(N-countingp1);
	countingp1=countingp1+(N-(countingp1+(countingother)));
	p1.tag=asInteger(countingp1);
	p2.tag=asInteger(countingother);
}

s3 2 modifyChild(){
	if(subpop.id==1){
		if (sourceSubpop.id==1 & p1.tag==0){
			return(F);}
		else if (sourceSubpop.tag==0){
			return(F);}
		else{
			sourceSubpop.tag=asInteger(sourceSubpop.tag-1);
			return(T);}}
	else{return(T);}
}


s4 2 late(){
	p2.setSubpopulationSize(0);
}

10001 {p1.setSubpopulationSize(bn);}
10090 {p1.setSubpopulationSize(1000);}

late() {
	// remove any new mutations added to the disabled diploid genomes
	sim.subpopulations.individuals.genome2.removeMutations();
	
	// remove mutations in the haploid genomes that have fixed
	muts = sim.mutationsOfType(m1);
	freqs = sim.mutationFrequencies(NULL, muts);
	sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}
11000 late() {
	sim.outputFixedMutations();
	p1.outputMSSample(10, replace=F, filePath="/Users/anamoralesarae/Dropbox (ASU)/slim_outputs/slim_output/ms.txt");
}


